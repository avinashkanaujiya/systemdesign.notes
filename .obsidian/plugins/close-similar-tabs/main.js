/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CST
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/utils.ts
var import_obsidian = require("obsidian");
var clearAfterDelay = (0, import_obsidian.debounce)(() => {
  console.clear();
}, 1e3 * 30, true);
var getPath = (leaf) => {
  return leaf.view.file && leaf.view.file.path || "";
};

// src/modal.ts
var import_obsidian2 = require("obsidian");
var DuplicateTabsModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h4", { text: "Close Similar Tabs Parameters" });
    new import_obsidian2.Setting(contentEl).setName("Quick switch").setDesc("Enable/disable Close Similar Tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableCST).onChange((value) => {
        this.plugin.settings.enableCST = value;
        this.plugin.saveSettings();
        const message = this.plugin.settings.enableCST ? "Close similar tabs ON" : "Close similar tabs OFF";
        new import_obsidian2.Notice(`${message}`);
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Close by window").setDesc(
      "Select whether the plugin will only close similar tabs within the same window, or throughout all open windows."
    ).addDropdown((dropdown) => {
      dropdown.addOptions({
        current: "Current window only",
        all: "All windows"
      }).setValue(this.plugin.settings.byWindow).onChange(async (value) => {
        if (value === "all" || value === "current") {
          this.plugin.settings.byWindow = value;
          this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian2.Setting(contentEl).setName("No empty tabs").setDesc("Activates no several empty tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.noEmptyTabs).onChange((value) => {
        this.plugin.settings.noEmptyTabs = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Be Clearly Notified").setDesc(
      "open a specific notification pop up, when a similar tab already exists"
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.beNotified).onChange((value) => {
        this.plugin.settings.beNotified = value;
        this.plugin.saveSettings();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DuplicateTabsSettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Close Similar Tabs" });
    const content = `
		<p>
		Repository: \u{1F334} <a href="https://github.com/1C0D/Obsidian-Close-Similar-Tabs">1C0D/Obsidian-Close-Similar-Tabs</a> \u{1F334}
		</p>
		`;
    containerEl.createDiv("", (el) => {
      el.innerHTML = content;
    });
    new import_obsidian3.Setting(containerEl).setName("Quick switch").setDesc("Enable/disable Close Similar Tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableCST).onChange((value) => {
        this.plugin.settings.enableCST = value;
        this.plugin.saveSettings();
        const message = this.plugin.settings.enableCST ? "Close similar tabs ON" : "Close similar tabs OFF";
        new import_obsidian3.Notice(`${message}`);
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Close by window").setDesc(
      "Select whether the plugin will only close similar tabs within the same window, or throughout all open windows."
    ).addDropdown((dropdown) => {
      dropdown.addOptions({
        current: "Current window only",
        all: "All windows"
      }).setValue(this.plugin.settings.byWindow).onChange(async (value) => {
        if (value === "all" || value === "current") {
          this.plugin.settings.byWindow = value;
          this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian3.Setting(containerEl).setName("No empty tabs").setDesc("Activates no several empty tabs").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.noEmptyTabs).onChange((value) => {
        this.plugin.settings.noEmptyTabs = value;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Be Clearly Notified").setDesc(
      "open a specific notification pop up, when a similar tab already exists"
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.beNotified).onChange((value) => {
        this.plugin.settings.beNotified = value;
        this.plugin.saveSettings();
      });
    });
    containerEl.createEl("p", {
      text: `2 commands: "Close Similar Tabs parameters" to directly change parameters, from the editor 
			and "Quick switch" to temporarly enable/disable Close Similar Tabs.,`
    });
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  byWindow: "current",
  noEmptyTabs: true,
  enableCST: true,
  beNotified: true
};
var CST = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.leavesAtStart = [];
    this.leaves = [];
    this.once = false;
    this.getDupliActive = () => {
      const leaves = this.getLeaves();
      const activeLeaf = this.activeLeaf;
      const { isMainWindow: isMainWindowActive, rootSplit: rootSplitActive, el: activeEl } = this.getLeafProperties(activeLeaf);
      if (!rootSplitActive && isMainWindowActive)
        return;
      for (const leaf of leaves) {
        const {
          isMainWindow: isMainWindowDupli,
          rootSplit: rootSplitDupli,
          el: dupliEl,
          isSameWindow: isSameWindowDupli
        } = this.getLeafProperties(leaf, true);
        if (leaf === activeLeaf || isMainWindowDupli && !rootSplitDupli || isSameWindowDupli && activeEl !== dupliEl || getPath(leaf) !== getPath(activeLeaf) || !isSameWindowDupli && this.settings.byWindow === "current") {
          this.once = true;
          setTimeout(() => {
            this.once = false;
          }, 200);
          continue;
        }
        return leaf;
      }
    };
    this.detachLeaf = async (duplicate) => {
      var _a, _b;
      let notEmpty = false;
      if (!duplicate)
        return;
      if (
        // this.once
        true
      ) {
        if (this.activeLeaf.history.backHistory.length) {
          await this.activeLeaf.history.back();
        }
      }
      if (getPath(duplicate)) {
        (_a = this.activeLeaf) == null ? void 0 : _a.detach();
        notEmpty = true;
        this.once = false;
      } else {
        if (this.settings.noEmptyTabs && duplicate.getViewState().type === "empty") {
          (_b = this.activeLeaf) == null ? void 0 : _b.detach();
        }
      }
      this.app.workspace.revealLeaf(duplicate);
      return notEmpty;
    };
    this.getLeaves = () => {
      const { workspace } = this.app;
      const leavesList = [];
      workspace.iterateAllLeaves((leaf) => {
        if (leaf.getRoot() === workspace.rootSplit && !this.getPinned(leaf)) {
          leavesList.push(leaf);
        }
      });
      return leavesList;
    };
    // was damn useful to debug. activeLeaf this is not so simple...
    this.allActivePath = (leaf, active_leaf_change = false) => {
      var _a;
      if (active_leaf_change) {
        console.log("[ active-leaf-change ]");
        console.log("ALC leaf", getPath(leaf));
      }
      const getActiveFilePath = (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path;
      console.log("ActiveFile", getActiveFilePath);
    };
    this.addedTab = () => {
      this.leaves = this.getLeaves();
      let value = NaN;
      if (this.leavesAtStart.length > this.leaves.length)
        value = -1;
      else if (this.leavesAtStart.length < this.leaves.length) {
        value = 1;
      } else
        value = 0;
      this.leavesAtStart = this.leaves;
      return value;
    };
  }
  async onload() {
    await this.loadSettings();
    await this.saveSettings();
    this.addSettingTab(new DuplicateTabsSettingsTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(
        this.app.workspace.on(
          // @ts-ignore
          "active-leaf-change",
          async (leaf) => {
            if (!this.settings.enableCST)
              return;
            console.debug("////////// active-leaf-change");
            const modif = this.addedTab();
            if (modif === -1 || leaf.getViewState().type === "swar8080/AVAILABLE_PLUGIN_UPDATES") {
              return;
            } else {
              this.activeLeaf = leaf;
              if (this.getPinned(leaf))
                return;
              const duplicate = this.getDupliActive();
              const notEmpty = await this.detachLeaf(duplicate);
              if (this.settings.beNotified && notEmpty) {
                new import_obsidian4.Notice("already opened");
              }
            }
          }
        )
      );
    });
    this.addCommand({
      id: "parameters",
      name: "CST parameters",
      callback: () => {
        new DuplicateTabsModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "quick-switch",
      name: "CST quick switch",
      callback: async () => {
        this.settings.enableCST = !this.settings.enableCST;
        const message = this.settings.enableCST ? "Close similar tabs ON" : "Close similar tabs OFF";
        new import_obsidian4.Notice(`${message}`);
        await this.saveSettings();
      }
    });
  }
  getLeafProperties(leaf, notActive = false) {
    const isMainWindow = leaf.view.containerEl.win === window;
    const rootSplit = leaf.getRoot() === this.app.workspace.rootSplit;
    const el = leaf.parentSplit.containerEl;
    if (notActive) {
      const isSameWindow = leaf.view.containerEl.win == activeWindow;
      return { isMainWindow, rootSplit, el, isSameWindow };
    }
    return { isMainWindow, rootSplit, el };
  }
  getVisibleLeaf() {
    const { workspace } = this.app;
    return workspace.getLeaf(false);
  }
  getPinned(leaf) {
    return leaf && leaf.getViewState().pinned;
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
