{"path":".obsidian/plugins/text-extractor/cache/56c5f92c65dc814959ddfcd87276b1ad.json","text":"Apache Cassandra Sujeet Kumar Jaiswal Principal Engineer Logistics Team CAP theorem ● Consistency: Every read receives the most recent write or an error. ● Availability: Every request receives a (non-error) response – without guarantee that it contains the most recent write. ● Partition Tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes. ● AP : Cassandra, CouchDB ● CP: HBase 1 Why Cassandra? ● Mirrored after google bigtable. ● Distributed database ○ homogenous nodes, read/write anywhere ○ partitioned row store database ○ Decentralized : no spof ● Peer-to-peer communication ○ gossip protocol ● Automatic data distribution ○ partition logics ● Easy deployment ○ Deployable on commodity hardware or cloud infra 2 Why Cassandra? - Multiple DC Support ● Multiple Data Center ○ \"Active-Active replication\" ● Replication Factor per DC ○ Clients write local DC : Data syncs to other DC 3 Why Cassandra? - Scalability Have More Data? Add more nodes. Need More Throughput? Add more nodes. ● Massively scalable (linearly) ○ petabytes of information and thousands of concurrent OPS ○ built-for-scale architecture - consistently outperforms other popular NoSQL alternatives in its performance benchmarks. 4 Why Cassandra? - Scalability ● Non-durable write metrics 5 Why Cassandra? - Scalability ● Mixed workload 6 Why Cassandra? - FT & Durability ● Nodes Down != Database Down ● Datacenter Down != Database Down ○ One Data Center goes offline, the others can seamlessly take over. ○ Offline DC back online becomes immediately available for workload ● Auto-Replication to multiple nodes, across multiple data centers is supported. ○ Failed nodes can be replaced with no downtime. ● Durable ○ Zero data loss, even when an entire data center goes down. 7 Why Cassandra? - Proved its Mettle ● Production Usage ● Apple's ~75,000 nodes, 10 PB of data ● Netflix ~2,500 nodes, 420 TB & over 1 trillion requests per day ● Being used by over >1500 companies that have large, active data sets. Eg Apple, CERN, Comcast, eBay, GitHub, GoDaddy, Hulu, Instagram, Intuit, Netflix, Reddit etc… 8 Why Cassandra?... ● Open source NoSQL (Not only SQL) database ○ CQL : Cassandra Query Language ● Cassandra management tools ○ nodetool ■ useful command-line management tool for Cassandra. ○ cassandra-stress ■ tool for load-stressing and basic benchmarking ● Commercial support ○ Support services are available from third parties like Datastax & Instaclustr etc... 9 Data Partitioning ● Murmur3Partitioner(default): uniformly distributes data across the cluster based on MurmurHash hash values. ● Random Partitioning: Uniformly distributes data across the cluster based on MD5 hash values. ● Ordered Partitioning : Distribute data based on sorted order of partition key. Hot spot problem 10 Replication Strategy ● Define replication factor while creating keyspace 11 Replication Strategy - Simple Strategy 12 Replication Strategy - Network Topology Strategy To replicate data between 1-n data centers, a replica group is defined and mapped to each logical or physical data center. CREATE KEYSPACE sample WITH replication = { 'class': 'NetworkTopologyStrategy', 'dc-west': 2, 'dc-east': 3 }; 13 Replication Mechanics Cassandra uses a snitch to define how nodes are grouped together within the overall network topology (such as rack and data center groupings) Property File Snitch : cassandratopology.properties # datacenter One # datacenter Two 175.56.12.105=DC1:RAC1 110.56.12.120=DC2:RAC1 175.50.13.200=DC1:RAC1 110.50.13.201=DC2:RAC1 120.53.24.101=DC1:RAC2 50.33.23.120=DC2:RAC2 120.55.16.200=DC1:RAC2 50.45.14.220=DC2:RAC2 14 CQL - Cassandra Query Language ● Primary language for communicating with database. ● Use the CQL shell, cqlsh to create keyspaces and tables, insert and query tables, plus much more ● CQL and SQL share the same abstract idea of a table constructed of columns and rows. The main difference from SQL is that Cassandra does not support joins or subqueries. CREATE TABLE example ( field1 int PRIMARY KEY , field2 int , field3 int ); INSERT INTO example (field1, field2, field3) VALUES (1 , 2 , 3 ); INSERT INTO example (field1, field2, field3) VALUES (4 , 5 , 6 ); INSERT INTO example (field1, field2, field3) VALUES (7 , 8 , 9 ); 15 Data Model : Internal Data Structure Its a row-oriented column structure design. 16 CREATE TABLE user_videos ( userid uuid, added_date timestamp, videoid uuid, name text, preview_image_location text, PRIMARY KEY (userid, added_date, videoid) ); ● userid : partition key (partitioning is based on this) ● clustering columns : added_date, videoid (ordering of rows is done by these) Primary Key 17 Data storage format 18 Write Path ● Append data to commit log (for durability) ● Write to memtable (in-memory write-back cache) ● Once memtable is full, flush data to disk in SSTable files (immutable sorted string) ○ sorts memtables by partition key and then writes the data to disk sequentially in SSTables. ● Commit log is purged ● Multiple SSTables are created with information of same partition keys. ○ During read op, all of these files are read and a merged response is sent. 19 Read Path ● row cache (RC): caches the whole partition. Use for heavily accessed partitions else avoid. ● bloom filter (BF): checks existence of the partition in the underlying SSTable ● partition keycache (PKC): stores frequently accessed mapping between partition tokens and their offsets in the SSTable. ● partition summary (PS): stores mapping b/w range of partition tokens into their position in PI. ● partition index (PI): stores a mapping between partition tokens and their offsets. ● compression offset map: holds the offset information for compressed blocks, so it knows the exact location of data on disk. 20 Read Path - Merge 21 Compaction ● To improve read performance as well as to utilize disk space, Cassandra periodically does compaction to create & use new consolidated SSTable files instead of multiple old SSTables. ● It’s a clean-up process for the data. It merges SSTables, resolving conflicts by using the timestamp, and cleans up data marked with expired tombstones. ● Its frequency is tunable. 22 Repairing nodes Over time, data in a replica can become inconsistent with other replicas due to the distributed nature of the database. Node repair corrects the inconsistencies so that eventually all nodes have the same and most up-to-date data. It is important part of regular maintenance for every Cassandra cluster. Cassandra provides the following repair processes: ● Hinted Handoff: Repair during write path. ● Read Repair: Repair during read path. ● Anti-Entropy Repair: Manual repair 23 Consistency Levels ● Applies to both Reads and Writes (i.e. is set on each query) ● Controlled at the Client API Level (% controlled by RF) ○ ONE – one replica from any DC ○ LOCAL_ONE – one replica from local DC ○ QUORUM – 51% of replicas from any DC ○ LOCAL_QUORUM – 51% of replicas from local DC ○ EACH_QUORUM – 51% of replicas from multiple DC's ○ ALL – all replicas ● The client code has and can control a hierarchy of automatic failure levels – i.e. one Data Center down with QUORUM, use LOCAL_QUORUM 24 Consistency Level (CL) and Speed ● How many replicas we need to hear from can affect how quickly we can read and write data in Cassandra. 25 Consistency Level and Data Consistency ● Replicas may disagree ○ Column values are timestamped ○ Last Write Wins (LWW) 26 Consistency Level and Availability ● Consistency Level choice affects availability ○ For example, 1 Data Center with application read (CL) at QUORUM can tolerate one replica being down and still be available (in RF=3) Client 27 Cassandra limits ● Columns in a partition: 2B, column value size: 2 GB (1MB recommended) ● Clustering column value length of: 65535 ● Key length: 65535 ● Table / CF name length: 48 characters ● Keyspace name length: 48 characters ● Statements in a batch: 65535 ● Fields in a tuple: 32768(just a few fields, such as 2-10, are recommended) ● Partition size: 100MB (lower partition size recommended) 28 Thank you! Sujeet Kumar Jaiswal +91 99530 53952 sujeet.jaiswal@paytmmall.com","libVersion":"0.2.2","langs":""}